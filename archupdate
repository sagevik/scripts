#! /bin/sh

# Update script for arch
# This script can be used to check for and install package updates on an arch based system.
#
# Usage:
# $ archupdate -b
# archupdate -b will run in the background checking for updates once every hour.
# It will output the number of available updates to /tmp/packageUpdates.tmp, and
# store the PID of the running instance in /tmp/archupdate.pid
#
# $ archupdate --stop
# archupdate --stop will try to stop a background running instance with the PID
# /tmp/archupdate.pid, and then remove the PID file in /tmp
#
# $ archupdate
# archupdate will run the script manually to check and list available updates and
# prompt for installing updates yes or no

# Color codes
GREEN="\033[0;32m"
RED="\033[0;31m"
RESET="\033[0m"

# Temp files
UPDATE_FILE="/tmp/packageUpdates"
PID_FILE="/tmp/archupdate.pid"

check_for_updates() {
    updates=$(checkupdates)
    echo "$updates"
}

background_update_checker() {
    while true; do
        upd=$(checkupdates | wc -l)
        echo "$upd" > "$UPDATE_FILE"
        sleep 3600
    done
}

if [ "$1" = "-b" ]; then
    if [ -f "$PID_FILE" ] && kill -0 "$(cat "$PID_FILE")" 2>/dev/null; then
        echo "Background process already running (PID $(cat "$PID_FILE"))."
        exit 1
    fi
    echo "Running background update checker..."
    background_update_checker &
    echo $! > "$PID_FILE" # Save PID
    disown
    exit 0
elif [ "$1" = "--stop" ]; then
    if [ -f "$PID_FILE" ] && kill -0 "$(cat "$PID_FILE")" 2>/dev/null; then
        kill "$(cat "$PID_FILE")"
        rm "$PID_FILE"
        echo "Background update checker stopped."
    else
        echo "No background process running."
    fi
    exit 0
fi

updates=$(check_for_updates)

if [ -z "$updates" ]; then
    echo "No updates available"
    notify-send "archupdate" "No updates available"
else
    echo -e "${GREEN}The following updates are available:${RESET}"
    echo "$updates"

    # Prompt for confirmation
    echo
    echo -e "${RED}Do you want to install these updates? (y/n):${RESET}"
    read -r choice

    if [ "$choice" = "y" ] || [ "$choice" = "Y" ]; then
        echo "Updating system"

        # Create backup
        sudo timeshift --create

        # Update packages
        echo "$updates"
        sudo pacman -Syu

        # Reset packageUpdates file
        echo "0" > "$UPDATE_FILE"

        # Notify
        notify-send "archupdate" "Finished updating"
    else
        echo "Update canceled"
        notify-send "archupdate" "Update canceled by user"
    fi
fi

